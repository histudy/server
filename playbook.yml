- name: Webサーバーのセットアップ
  hosts: web
  become: true
  gather_facts: true
  pre_tasks:
    - name: 依存パッケージのインストール
      apt:
        name: python-apt
    - name: キャッシュの更新
      apt:
        update_cache: true
  post_tasks:
    - name: 未使用のパッケージを削除
      apt:
        autoremove: true
  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
  tasks:
    - name: ホスト名の設定
      hostname:
        name: "{{ inventory_hostname }}"
    - name: ufwのインストール
      apt:
        name: ufw
    - name: ログイン攻撃の制限
      ufw:
        rule: allow
        port: ssh
        proto: tcp
    - name: sudoのインストール
      apt:
        name: sudo
    - name: 管理者グループのsudoの設定
      template:
        src: sudo/admin.j2
        dest: /etc/sudoers.d/admin
        validate: 'visudo -cf %s'
    - name: ufwの有効化とデフォルトのポリシーの設定
      ufw:
        state: enabled
        logging: "on"
        default: deny
    - name: backportsリポジトリを追加
      apt_repository:
        repo: 'deb http://ftp.debian.org/debian {{ ansible_distribution_release }}-backports main'
        filename: backports
    - name: デフォルトリリースをbackportsに設定
      lineinfile:
        dest: /etc/apt/apt.conf.d/99target
        regexp: '^APT::Default-Release '
        line: 'APT::Default-Release {{ ansible_distribution_release }}-backports;'
        create: true
    - name: etckeeperのインストール
      apt:
        name: etckeeper
    - name: bash-completionのインストール
      apt:
        name: bash-completion
    - name: fail2banのインストール
      apt:
        name: fail2ban
    # fail2banの設定
    # デフォオルトで「/etc/fail2ban/jail.d/defaults-debian.conf」に以下の記載が存在するため特に設定は行わず
    # ```
    # [sshd]
    # enabled = true
    # ```
    - name: mackerelリポジトリのaptキーを追加
      apt_key:
        url: "https://mackerel.io/file/cert/GPG-KEY-mackerel-v2"
    - name: mackerelリポジトリを追加
      apt_repository:
        repo: "deb http://apt.mackerel.io/v2/ mackerel contrib"
        filename: mackerel
    - name: Mackerel関連パッケージのインストール
      apt:
        name:
          - mackerel-agent
          - mackerel-agent-plugins
          - mackerel-check-plugins
          - mkr
    - name: MackerelのAPIキーを設定
      lineinfile:
        path: /etc/mackerel-agent/mackerel-agent.conf
        regexp: "^(#\\s*)?apikey\\s*="
        line: 'apikey = "{{ mackerel_api_key }}"'
    - name: Webサーバーのインストール
      apt:
        name: nginx
    - name: Diffie-Hellmanパラメーターの生成
      openssl_dhparam:
        path: "{{ nginx_dh_key_path }}"
        size: "{{ nginx_dh_key_bit }}"
    - name: スニペットの流し込み
      copy:
        src: "{{ item }}"
        dest: "/etc/nginx/snippets/{{ item | basename }}"
      with_fileglob:
        - "files/nginx/snippets/*.conf"
    - name: Nginxの設定
      template:
        src: nginx/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify: restart nginx
    - name: バーチャルホストの設定
      template:
        src: vhost.j2
        dest: "/etc/nginx/sites-available/{{ item.name | default(item.server_name) }}"
      loop: "{{ nginx_vhosts | default([]) }}"
      notify: reload nginx
    - name: バーチャルホストの有効化/無効化
      file:
        path: /etc/nginx/sites-enabled/{{ item.name | default(item.server_name) }}
        src: "{{ '/etc/nginx/sites-available/' + item.name | default(item.server_name) if item.state | default(true) else omit }}"
        state: "{{ 'link' if item.state | default(true) else 'absent' }}"
      loop: "{{ nginx_vhosts | default([]) }}"
      notify: reload nginx
    - name: httpおよびhttpsポートを解放
      ufw:
        rule: allow
        name: "WWW Full"
    - name: SSL(Let's Encrypt)関連パッケージのインストール
      apt:
        name:
          - dehydrated
          - lexicon
    - name: dehydratedの設定
      template:
        src: dehydrated/local.sh.j2
        dest: /etc/dehydrated/conf.d/local.sh
    - name: ドメインテキストの設定
      template:
        src: dehydrated/domains.txt.j2
        dest: /etc/dehydrated/domains.txt
    - name: フックスクリプトの設定
      template:
        src: dehydrated/hook.sh.j2
        dest: "/etc/dehydrated/hook.sh"
        mode: "0755"
    - name: Let's Encryptアカウントの登録
      command: /usr/bin/dehydrated --register --accept-terms
      args:
        creates: /var/lib/dehydrated/accounts
    - name: Nginxの有効化および起動
      systemd:
        name: nginx
        enabled: true
        state: started
    - name: mackerel-agentの有効化および起動
      systemd:
        name: mackerel-agent
        enabled: true
        state: started
    - name: fail2banの有効化および起動
      systemd:
        name: fail2ban
        enabled: true
        state: started
    - name: グループの管理
      group:
        name: "{{ item.name }}"
        state: "{{ 'absent' if item.removed | default(false) else 'present' }}"
      loop: "{{ manage_groups }}"
      loop_control:
        label: "{{ item.name }}"
      tags: group
    - name: アカウントの存在状態ごとのアカウント一覧格納用変数を定義
      set_fact:
        present_acounts: "{{ manage_acounts | selectattr('removed', 'undefined') | list }}"
        absent_acounts: "{{ manage_acounts | selectattr('removed', 'defined') | selectattr('removed') | list }}"
      tags: always
    - name: ユーザーアカウントの管理
      user:
        name: "{{ item.name }}"
        password: "{{ item.password | password_hash('sha512') if item.password is defined else omit }}"
        shell: "{{ item.shell | default('/bin/bash') }}"
        groups: "{{ item.groups | default(omit) }}"
        state: "{{ 'absent' if item.removed | default(false) else 'present' }}"
        remove: "{{ item.removed | default(false) }}"
      loop: "{{ manage_acounts }}"
      loop_control:
        label: "{{ item.name }}"
      tags: user
    - name: 各アカウントの公開鍵認証の管理
      authorized_key:
        user: "{{ item.0.name }}"
        key: "{{ item.1.key }}"
        state: "{{ 'absent' if item.1.removed | default(false) else 'present' }}"
      loop: "{{ present_acounts | subelements('authorized_keys', skip_missing=True) }}"
      loop_control:
        label: "{{ item.0.name }}:{{ item.1.key }}"
      tags: authorized_key
    - name: 管理者アカウント一覧の変数を設定
      set_fact:
        admin_acounts: "{{ present_acounts | selectattr('admin', 'defined') | selectattr('admin') | list }}"
      tags: always
    - name: 各アカウントの管理者グループの割り当て
      user:
        name: "{{ item.name }}"
        groups: adm
        append: true
      loop: "{{ admin_acounts }}"
      loop_control:
        label: "{{ item.name }}"
      tags: user
    - name: ドキュメントルートのアクセス権を変更
      file:
        path: /var/www/html
        group: webadmin
        owner: root
        mode: "0775"
    - name: vimのインストール
      apt:
        name: vim
